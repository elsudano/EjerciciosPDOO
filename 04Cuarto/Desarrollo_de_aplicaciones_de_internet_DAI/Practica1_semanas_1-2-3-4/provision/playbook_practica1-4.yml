---
- hosts: all
  remote_user: vagrant
  # gather_facts: False
  environment:
    # Estas son las variables que se utilizan para ejecutar la aplicacion
    # pero setearlas en este punto no sirve de nada por que no es la misma
    # shell en la que se va a realizar la ejecución de los fuentes.
    # hay que asignar las variables en el mismo punto donde se produce
    # la ejecución del programa, osea, fabric
    FLASK_APP: '/home/{{ ansible_env.USER }}/src/app.py'
    FLASK_ENV: 'development'
    LC_ALL: 'C.UTF-8'
    LANG: 'C.UTF-8'
  pre_tasks:
    #- debug: msg="{{ ansible_env }}"
    #- debug: msg="{{ lookup('env','USER') }}"
  tasks:
    - name: Upgrade all packages
      become: yes
      dnf:
        name: "*"
        state: latest   
    - name: Install requeriments of disable selinux
      become: yes
      dnf:
        name: libselinux-python
        state: latest
    - name: Disable SeLinux
      become: yes
      selinux:
        state: disabled
    - name: Stoping FirewallD
      become: yes
      systemd:
        name: firewalld
        state: stopped
    - name: Install Utils for server Linux
      become: yes
      dnf:
        name: ['htop', 'nano', 'net-tools']
        state: latest
    - name: Install Flask
      become: yes
      dnf:
        name: python3-flask
        state: latest
    - name: Install PIL library for images
      become: yes
      dnf:
        name: python3-pillow
        state: latest
    - name: Install python3-pyOpenSSL library connect for https
      become: yes
      dnf:
        name: python3-pyOpenSSL
        state: latest
    - name: Install Pickleshare module (database)
      become: yes
      dnf:
        name: python3-pickleshare
        state: latest    
    - name: Install No-SQL database MongoDB and utils
      become: yes
      dnf:
        name: ['mongodb', 'mongodb-server', 'mongo-tools', 'python3-pymongo']
        state: latest
    - name: Change configuration MongoDB /etc/mongod.conf
      become: yes
      lineinfile:
        path: /etc/mongod.conf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
      - { regexp: 'bindIp: 127\.0\.0\.1', line: '  bindIp: 127.0.0.1' }
      - { regexp: 'ipv6:\s\w+', line: '  ipv6: false' }
    - name: Starting MongoDB Server
      become: yes
      systemd:
        daemon_reload: yes
        enabled: yes
        name: mongod
        state: started
#     Las siguientes lineas se usan solamente para cuando las variables
#     de entorno que se quieran utilizar van a ser permanentes
    - name: Setting environment var for Flask Application
      become: yes
      lineinfile:
        path: /etc/profile
        create: yes
        line: "{{ item }}"
      with_items:
      - 'export FLASK_APP="/home/{{ ansible_env.USER }}/src/app.py"'
      - 'export FLASK_DEBUG=1'
      - 'export FLASK_ENV=development'
      - "export DO_SALT={{ lookup('env','DO_SALT') }}"
      - "export MONGODB_HOST={{ lookup('env','MONGODB_HOST') }}"
      - "export MONGODB_PORT={{ lookup('env','MONGODB_PORT') }}"
#    - name: Copy Source Code to remote machine
#      copy:
#        src: ~/GitHub/Universidad/04Cuarto/Desarrollo_de_aplicaciones_de_internet_DAI/config_machine/src/
#        dest: ~/src/
#        owner: vagrant
#        group: vagrant
#        mode: 0744
#    - name: Print on screen envirotments vars
#      command: env
#      register: env_vars
#    - debug: msg="{{ env_vars.stdout }}"
#    - name: Make directory of develop
#      file:
#        path: "/home/$USER/src"
#        state: directory
#        mode: 0755
#    - name: Run Application
#      command: "ifconfig"
